# ================================
# Build Image
# ================================
# Use buildx for multi-platform support
FROM --platform=$BUILDPLATFORM swift:5.10-jammy as build

# Set ARG for platform targeting
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Install system updates
RUN export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
    && apt-get -q update \
    && apt-get -q dist-upgrade -y \
    && rm -rf /var/lib/apt/lists/*

# Set build directory
WORKDIR /build

# Copy dependencies first for caching
COPY Package.* ./
RUN swift package resolve --skip-update \
    $([ -f ./Package.resolved ] && echo "--force-resolved-versions" || true)

# Copy the entire source code
COPY . .

# Build optimized binary
RUN swift build -c release --static-swift-stdlib \
    -Xlinker -u -Xlinker *swift*backtrace_isThunkFunction
    
# Copy resources bundled by SPM to staging area
RUN find -L "$(swift build --package-path /build -c release --show-bin-path)/" -regex '.*\.resources$' -exec cp -Ra {} ./ \;

# Copy any resources from the public directory and views directory if the directories exist
# Ensure that by default, neither the directory nor any of its contents are writable.
RUN [ -d /build/Public ] && { mv /build/Public ./Public && chmod -R a-w ./Public; } || true
RUN mkdir -p /build/Resources
RUN [ -d /build/Resources ] && { mv /build/Resources ./Resources && chmod -R a-w ./Resources; } || true

# ================================
# Runtime Image
# ================================
FROM --platform=$TARGETPLATFORM swift:5.10-jammy-slim

# Install essential runtime packages
RUN export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
    && apt-get -q update \
    && apt-get -q install -y \
        ca-certificates \
        tzdata \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Create a vapor user and group
RUN useradd --user-group --create-home --system --skel /dev/null --home-dir /app vapor

# Set working directory
WORKDIR /app

# Copy built executable and resources from build stage
COPY --from=build --chown=vapor:vapor /build/.build/release/App ./
COPY --from=build --chown=vapor:vapor /build/Public ./Public
COPY --from=build --chown=vapor:vapor /build/Resources ./Resources

# Copy configuration files
COPY --from=build --chown=vapor:vapor /build/.env.production /app/.env
COPY --from=build --chown=vapor:vapor /build/keypair.jwks /app
COPY --from=build --chown=vapor:vapor /build/ca-certificate.crt /app

# Add healthcheck script
COPY --chown=vapor:vapor <<EOF /app/healthcheck.sh
#!/bin/bash
curl -f http://localhost:8080/health || exit 1
EOF

RUN chmod +x /app/healthcheck.sh

# Set environment variables
ENV SWIFT_BACKTRACE=enable=yes,sanitize=yes,threads=all,images=all,interactive=no
ENV VAPOR_ENV=production

# Add database connection retries script
COPY --chown=vapor:vapor <<EOF /app/wait-for-db.sh
#!/bin/bash
set -e

host="\${DATABASE_HOST:-db}"
port="\${DATABASE_PORT:-5432}"
user="\${DATABASE_USERNAME:-gsshbz_username}"
password="\${DATABASE_PASSWORD:-gsshbz_password}"
dbname="\${DATABASE_NAME:-gsshbz_database}"

echo "Waiting for PostgreSQL..."

for i in {1..30}; do
  if PGPASSWORD="\$password" pg_isready -h "\$host" -p "\$port" -U "\$user" -d "\$dbname" -t 1 >/dev/null 2>&1; then
    echo "PostgreSQL is ready!"
    exit 0
  fi
  echo "Waiting for PostgreSQL... \$i/30"
  sleep 1
done

echo "Failed to connect to PostgreSQL"
exit 1
EOF

RUN chmod +x /app/wait-for-db.sh
RUN apt-get update && apt-get install -y postgresql-client && rm -rf /var/lib/apt/lists/*

# Run the app as a non-root user
USER vapor:vapor

# Expose port for the application
EXPOSE 8080

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD ["./healthcheck.sh"]

# Start the server in production mode
ENTRYPOINT ["./App"]
CMD ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
