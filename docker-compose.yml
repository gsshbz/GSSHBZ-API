# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
#version: '3.7'

volumes:
    db_data:
#    redis_data: # Redis persistent data

#x-shared_environment: &shared_environment
#    LOG_LEVEL: ${LOG_LEVEL:-debug}
#    DATABASE_HOST: db
#    DATABASE_NAME: gsshbz_database
#    DATABASE_USERNAME: gsshbz_username
#    DATABASE_PASSWORD: gsshbz_password
#    REDIS_HOST: redis://redis:6379 # Add Redis connection environment variable
#    REDIS_PORT: 6379

services:
# PRODUCTION SERVICE
app:
  image: gsshbz-image:latest
  build:
    context: .
    dockerfile: Dockerfile.prod
    args:
      - BUILDPLATFORM=linux/amd64
      - TARGETPLATFORM=linux/amd64
  env_file: .env.production
  depends_on:
    db:
      condition: service_healthy  # Wait for DB to be ready
  ports:
    - '8080:8080'
  command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
  restart: unless-stopped
  healthcheck:
    test: ["CMD", "./healthcheck.sh"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 10s
#  app:
#    image: gsshbz-image:latest
#    build:
#      context: .
#      dockerfile: Dockerfile.prod # Explicitly use production build
##    environment:
##      <<: *shared_environment
#    env_file: .env.production
#    depends_on:
#      - db
##      - redis
#    ports:
#      - '8080:8080'
#    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
#    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
    
# DEVELOPMENT SERVICE
  app-dev:
      user: "0" # Runs as root
      image: gsshbz-dev
      build:
        context: .
        dockerfile: Dockerfile.dev # Use the development Dockerfile
#      environment:
#        <<: *shared_environment
      env_file: .env.development
      depends_on:
        - db
#        - redis
      ports:
        - '8080:8080'
      volumes:
        - .:/app  # Mount the project directory for live development
#      command: ["swift", "run", "--hostname", "0.0.0.0", "--port", "8080"]
      command: ["swift", "run", "App", "serve", "--env", "development", "--hostname", "0.0.0.0", "--port", "8080"]
          

  migrate:
    image: gsshbz-image:latest
    build:
      context: .
      dockerfile: Dockerfile.prod # Ensure migrations use the production image
#    environment:
#      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0

  revert:
    image: gsshbz-image:latest
    build:
      context: .
#    environment:
#      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0

#  db:
#    image: postgres:16-alpine
#    volumes:
#      - db_data:/var/lib/postgresql/data/pgdata
#    environment:
#      PGDATA: /var/lib/postgresql/data/pgdata
#      POSTGRES_USER: gsshbz_username
#      POSTGRES_PASSWORD: gsshbz_password
#      POSTGRES_DB: gsshbz_database
#    ports:
#      - '5432:5432'

  db:
    image: postgres:16-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: gsshbz_username
      POSTGRES_PASSWORD: gsshbz_password
      POSTGRES_DB: gsshbz_database
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gsshbz_username"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
